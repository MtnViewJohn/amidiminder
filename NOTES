NOTES


# TODO

## state and profiles

[x] command line change to commands
    [x] modes
    [x] minder command
    [x] check command
    [x] print help on no args at all
    [x] help subcommand
    [x] add ExistingPathValidator() to rules file arguments
    [x] version flag? (set_version_flag())
    [x] load rules only after command is switched


[] file locations in code somewhere
    [x] built from optional environment variables
    [x] need to decide how much checking to do
    [x] need to exit when files aren't good
    [x] file reading & file writing utilities
    [x] check file actions
        [x] read from supplied path
    [x] read state (profile & observed) on state on start
    [x] don't crash on empty statefiles... just be happy
    [x] write observed on changes
    [] handle "-" to mean stdin/stdout
    [] safe file write code (write to .save, rename)

[] reorg
    [x] rename command to daemon
    [x] move main and control commands out of MidiMinder class
    [x] refactor MidiMinder
    [x] rename configRules in MM profileRules
    [x] make the files be observed.rules and profile.rules
        [x] socket should be control.socket
    [x] move Files::initialize* into IPC code
    [] change commtest command on the wire from "ahoy" to "commtest"
        [] find suitable haiku for the commtest command

[] command line and deamon communication
    [x] commtest command
    [x] use poll or epoll with seq & the socket
    [x] reset command
    [x] load command
    [] save command
    [] command logging should be done by each command handler

[] new observed connection/disconnection logic
    [x] reset on start
    [] don't rebuild ports on reset - should be no need
    [] correctly adjusting observed rules if needed

## aconnect functionality

[] connect & disconnect
[] list

## other

[] improve output of check command
[] switch to throwing errors on fatal system (and Seq) errors
[] review all error messages
    [] leading case
    [] wording
[] handle socket errors in the IPC code intellegently
    [] client wants to report and exit
    [] server wants to report and discard (aborting the command in progress)
    [] calls to write in ipc.cpp should have the return value checked
[] move verbose port details option to the list command
[x] harmonize CPP_FLAGS with what happens when built for deb
    [] fix CPP_FLAGS for debugging to -Og
[] group subcommands in Args to make help more clear
[] print rules when loading profile?
[] optimize saving observedRules



# MAJOR THEMES

## aconnect functionality
    - using the better syntax and naming for making, listing
    - and breaking connections
    - clear all connections

## connection state
    - keep what is intended even across reboot
    - create provisional rules when connections are made
    - (and delete them when broken)
    - save those in a live file (in /etc?)
    - on load use the user written set & the saved set

## connection setups
    - named setups - one is active
    - merge setups?
    - save current state as a setup
    - files in standard places

## maturty
    - man page
    - bash completion
    - SIGHUP for reload
    - handle daemon running or not


# DESIGN

Two rules files:
    Fixed
        come from user
        symlink from /etc/amidiminder.rules to ???
        how to recognize chances in rules?
            - observe file change?
            - command to switch the symlink?
            - signal to reload?
    Live
        from observations of connects and disconnects
        relative to the Fixed rules
            a connect that the Fixed rules would make won't be recorded
            has to be able to record overrides of the Fixed rules

    Static & Dynamic?

Modes:
    minder          - like the current operation
    connect         - make a connection, the minder will see it
    disconnect      - break a connection, the minder will see it
    reset           - clear the live rules, reset to only connections from Fixed
    load            - set new Fixed rules & reset
    save            - save the current Fixed & Live rules as new single rules file
    check           - check rule set file
    list            - show devices, ports, and connections



in service file

RuntimeDirectory=amidiminder
StateDirectory=amidiminder

these set environment variables
    $RUNTIME_DIRECTORY
    $STATE_DIRECTORY

in the app, if not set, default these to
    /run/amidiminder
    /var/lib/amidiminder

Then use files as follows:
    ${RUNTIME_DIRECTORY}/control.socket -- socket to minder if running
    ${STATE_DIRECTORY}/profile.rules    -- fixed rules (copies when user asked)
    ${STATE_DIRECTORY}/observed.rules   -- observed connections & disconnects



# ALGOS

add port
    build a list of candidates:
        for each rule
            consider this port as a sender against all possible dests
            consider this port as a dest against all possible senders
                for each of these that match the rule
                    if connect rule, add to candidates if absent
                    if no-connect rule, remove from candidates
    for each candidate
        if wild card
            consider if any other connection, with these clients (not ports!)
            matches the rule, and if so, skip this candidate
        make connection

del port
    remove all known connections with this port

reset (& startup)
