NOTES


# TODO

## state and profiles

[x] command line change to commands
    [x] modes
    [x] minder command
    [x] check command
    [x] print help on no args at all
    [x] help subcommand
    [x] add ExistingPathValidator() to rules file arguments
    [x] version flag? (set_version_flag())
    [x] load rules only after command is switched


[] file locations in code somewhere
    [x] built from optional environment variables
    [x] need to decide how much checking to do
    [x] need to exit when files aren't good
    [x] file reading & file writing utilities
    [x] check file actions
        [x] read from supplied path
    [x] read state (profile & observed) on state on start
    [] don't crash on empty statefiles... just be happy
    [] write observed on changes
    [] handle "-" to mean stdin/stdout
    [] if state is missing:
        [] write empty profile
        [] ? copy from /user/share/amidiminder/general.rules

[] reorg
    [] rename command to daemon
    [] move main and control commands out of MidiMinder class
    [] refactor MidiMinder
    [] rename configRules in MM profileRules
    [] make the files be observed.rules and profile.rules

[] command line and deamon communication
    [x] commtest command
    [x] use poll or epoll with seq & the socket
    [] reset command
    [] load command
    [] save command

## aconnect functionality

[] connect & disconnect
[] list

## other

[] improve output of check command
[] switch to throwing errors on fatal system (and Seq) errors
[] review all error messages
    [] leading case
    [] wording
[] handle socket errors in the IPC code intellegently
    [] client wants to report and exit
    [] server wants to report and discard (aborting the command in progress)


# MAJOR THEMES

## aconnect functionality
    - using the better syntax and naming for making, listing
    - and breaking connections
    - clear all connections

## connection state
    - keep what is intended even across reboot
    - create provisional rules when connections are made
    - (and delete them when broken)
    - save those in a live file (in /etc?)
    - on load use the user written set & the saved set

## connection setups
    - named setups - one is active
    - merge setups?
    - save current state as a setup
    - files in standard places

## maturty
    - man page
    - bash completion
    - SIGHUP for reload
    - handle daemon running or not


# DESIGN

Two rules files:
    Fixed
        come from user
        symlink from /etc/amidiminder.rules to ???
        how to recognize chances in rules?
            - observe file change?
            - command to switch the symlink?
            - signal to reload?
    Live
        from observations of connects and disconnects
        relative to the Fixed rules
            a connect that the Fixed rules would make won't be recorded
            has to be able to record overrides of the Fixed rules

    Static & Dynamic?

Modes:
    minder          - like the current operation
    connect         - make a connection, the minder will see it
    disconnect      - break a connection, the minder will see it
    reset           - clear the live rules, reset to only connections from Fixed
    load            - set new Fixed rules & reset
    save            - save the current Fixed & Live rules as new single rules file
    check           - check rule set file
    list            - show devices, ports, and connections



in service file

RuntimeDirectory=amidiminder
StateDirectory=amidiminder

these set environment variables
    $RUNTIME_DIRECTORY
    $STATE_DIRECTORY

in the app, if not set, default these to
    /run/amidiminder
    /var/lib/amidiminder

Then use files as follows:
    ${RUNTIME_DIRECTORY}/cmd    -- socket to minder if running
    ${RUNTIME_STATE}/rules      -- fixed rules (copies when user asked)
    ${RUNTIME_STATE}/observed   -- observed connections & disconnects

